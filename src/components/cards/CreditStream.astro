---
// Import interfaces...
import type { ICreditStream } from '@interfaces/budget';

// Import necessary composables...
import useFormatting from '@composables/useFormatting';

// Define the
type Props = {
  stream: ICreditStream;
};

// Get the
const { stream } = Astro.props;

// Get the methods from the composables.
const { toPrice, toTitle } = useFormatting();

// Calculate the total amount of this income stream that was fulfilled.
const fulfilled: number = stream.actual.reduce(
  (acc, transaction) => acc + transaction.amount,
  0
);

// Calculate the fulfillment progress.
const progress: number = (fulfilled / stream.projected.amount) * 100;
---

<div
  class="transition-shadow ease-in rounded-lg px-6 py-4 bg-indigo-600 flex flex-col gap-2 justify-between md:px-8 md:py-6 xl:px-5 hover:shadow-lg"
>
  <div class="flex flex-col">
    <h1
      class="mb-1 text-md text-indigo-100 font-medium tracking-tight leading-3 md:mb-0 md:text-lg"
    >
      {toTitle(stream.projected.nature)}
    </h1>
    <small class="text-sm text-indigo-100">
      {toTitle(stream.projected.description?.toLowerCase() ?? '')}
    </small>
  </div>

  {/* Income stream projected amount */}
  <p
    class="text-3xl text-indigo-50 tracking-tighter font-mono font-extrabold md:text-2xl"
  >
    {toPrice(stream.projected.amount, stream.projected.currency)}
  </p>

  {/* Income stream fulfillment progress */}
  <div class="overflow-hidden rounded-full bg-gray-200">
    <div
      class="h-1 rounded-full bg-gradient-to-r from-green-600 to-blue-900"
      style={`width: ${progress}%`}
    >
    </div>
  </div>
</div>
