---
// Import the interfaces...
import {
  EProjectedExpenseCategory,
  ETransactionFrequencyPeriod,
  ETransactionType,
  ETransactionNature,
  type IExpensePeriod,
  type IProjectedExpense,
  type IProjectedIncome,
  type ITransaction,
} from '@interfaces/budget';
import type { IUser } from '@interfaces/user';

// Import the composables...
import useFinances from '@composables/useFinances';

// Import the components
import TheNavbar from '@layouts/TheNavbar.astro';
import ProjectedIncomeCard from '@components/cards/ProjectedIncomeCard.astro';
import ProjectedExpensesCard from '@components/cards/ProjectedExpensesCard.astro';
import ActualIncome from '@components/cards/ActualIncome.astro';
import ActualExpenses from '@components/cards/ActualExpenses.astro';
import ActualSavings from '@components/cards/ActualSavings.astro';
import ActualInvestments from '../components/cards/ActualInvestments.astro';
import CreditStream from '@components/cards/CreditStream.astro';
import IncomeReport from '@components/reports/IncomeReport';
import ExpensesReport from '@components/reports/ExpensesReport';
import ProjectedIncomeDialog from '@components/dialogs/ProjectedIncomeDialog';
import ProjectedExpenseDialog from '@components/dialogs/ProjectedExpenseDialog';
import NewTransactionDialog from '@components/dialogs/NewTransactionDialog';
import TransactionsSheet from '@components/tables/TransactionSheet';

// Get the data
const user: IUser = {
  username: 'chariskiragu',
  budget: {
    credits: [
      {
        uid: '8ddd6810',
        refs: [],
        amount: 65800,
        currency: 'ZAR',
        type: ETransactionType.CREDIT,
        nature: 'paycheck',
        description: 'Base salary.',
        frequency: {
          isRecurring: true,
          period: ETransactionFrequencyPeriod.MONTH,
          value: 1,
          start: '2023-02-28T08:30:30.000Z',
          end: undefined,
        },
        created_at: '2023-01-07T06:35:34.155Z',
        updated_at: '2023-01-07T06:35:34.155Z',
      },
      {
        uid: '75a700fe',
        refs: [],
        amount: 14200,
        currency: 'ZAR',
        type: ETransactionType.CREDIT,
        nature: 'bonus',
        description: 'Y1 siging bonus.',
        frequency: {
          isRecurring: true,
          period: ETransactionFrequencyPeriod.MONTH,
          value: 1,
          start: '2023-12-28T08:30:30.000Z',
          end: '2023-12-28T08:30:30.000Z',
        },
        created_at: '2023-02-28T08:30:30.000Z',
        updated_at: '2023-02-28T08:30:30.000Z',
      },
    ],
    debits: [
      {
        uid: '2784baf1',
        refs: ['all'],
        type: ETransactionType.DEBIT,
        nature: 'tithe',
        category: EProjectedExpenseCategory.PERCENTAGE,
        amount: 10,
        currency: 'ZAR',
        description: 'Monthly Tithe payment',
        frequency: {
          isRecurring: true,
          period: ETransactionFrequencyPeriod.MONTH,
          value: 1,
          start: '2023-02-28T08:30:30.000Z',
          end: undefined,
        },
        created_at: '2023-01-07T06:35:34.155Z',
        updated_at: '2023-01-07T06:35:34.155Z',
      },
      {
        uid: 'dd93b80a',
        refs: ['all'],
        type: ETransactionType.DEBIT,
        category: EProjectedExpenseCategory.PERCENTAGE,
        amount: 30,
        currency: 'ZAR',
        frequency: {
          isRecurring: true,
          period: ETransactionFrequencyPeriod.MONTH,
          value: 1,
          start: '2023-02-28T08:30:30.000Z',
          end: undefined,
        },
        nature: 'tax',
        description: 'Income Tax',
        created_at: '2023-01-07T06:35:34.155Z',
        updated_at: '2023-01-07T06:35:34.155Z',
      },
      {
        uid: 'b83a38d6',
        refs: ['all'],
        type: ETransactionType.DEBIT,
        category: EProjectedExpenseCategory.PERCENTAGE,
        amount: 10,
        currency: 'ZAR',
        frequency: {
          isRecurring: true,
          period: ETransactionFrequencyPeriod.MONTH,
          value: 1,
          start: '2023-02-28T08:30:30.000Z',
          end: undefined,
        },
        nature: 'investment',
        description: 'Monthly Investment',
        created_at: '2023-01-07T06:35:34.155Z',
        updated_at: '2023-01-07T06:35:34.155Z',
      },
      {
        uid: 'f22400fc',
        refs: ['8ddd6810'],
        type: ETransactionType.DEBIT,
        category: EProjectedExpenseCategory.FIXED,
        amount: 11000,
        currency: 'ZAR',
        frequency: {
          isRecurring: true,
          period: ETransactionFrequencyPeriod.MONTH,
          value: 1,
          start: '2023-02-28T08:30:30.000Z',
          end: undefined,
        },
        nature: 'rent',
        description: 'Monthly rent',
        created_at: '2023-01-07T06:35:34.155Z',
        updated_at: '2023-01-07T06:35:34.155Z',
      },
    ],
    transactions: [
      {
        uid: '852b0411',
        refs: [],
        currency: 'ZAR',
        type: ETransactionType.CREDIT,
        description: 'Relocation lumpsome',
        nature: 'bonus',
        amount: 86400,
        created_at: '2022-12-15T06:35:34.155Z',
        updated_at: '2022-12-15T06:35:34.155Z',
      },
      {
        uid: '463d0331',
        refs: ['f22400fc'],
        currency: 'ZAR',
        type: ETransactionType.DEBIT,
        description:
          "First month's rent, deposit, service charge and application fee for the new apartment",
        nature: 'rent',
        amount: 15700,
        updated_at: '2023-02-01T06:35:34.155Z',
        created_at: '2023-02-01T06:35:34.155Z',
      },
      {
        uid: '052d7675',
        refs: [],
        amount: 4200,
        currency: 'ZAR',
        type: ETransactionType.DEBIT,
        nature: 'housing',
        description: '',
        created_at: '2023-02-02T06:35:34.155Z',
        updated_at: '2023-02-02T06:35:34.155Z',
      },
      {
        uid: 'd41bd660',
        refs: [],
        amount: 1200,
        currency: 'ZAR',
        type: ETransactionType.DEBIT,
        nature: 'transport',
        description: '',
        created_at: '2023-02-15T10:35:34.155Z',
        updated_at: '2023-02-15T10:35:34.155Z',
      },
      {
        uid: 'd41be660',
        refs: [],
        amount: 4000,
        currency: 'ZAR',
        type: ETransactionType.DEBIT,
        nature: ETransactionNature.SAVING,
        description: '',
        created_at: '2023-02-15T10:35:34.155Z',
        updated_at: '2023-02-15T10:35:34.155Z',
      },
    ],
  },
};

// Define the period.
const period: IExpensePeriod = {
  range: 'monthly',
  start: new Date('2023-02-01'),
  end: new Date('2023-03-31'),
};

// Create a user finances object.
const {
  totalProjectedCredits,
  totalProjectedDebits,
  totalActualCredits,
  totalActualDebits,
  creditTransactions,
  debitTransactions,
  creditStreams,
} = useFinances(user.budget);
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content="Budgetr" />
    <title>Budgetr</title>
  </head>
  <body>
    <!-- Navigation bar -->
    <header class="sticky top-0 z-10">
      <TheNavbar />
    </header>

    <!-- Content -->
    <div class="relative h-screen">
      <!-- Main content -->
      <main class="h-full pl-6 p-6 md:px-12 md:py-12 2xl:px-20">
        <!-- At a glance -->
        <section>
          <h1 class="mb-6 text-gray-800 text-5xl font-extrabold">
            At a glance
          </h1>

          <div
            class="grid grid-cols-1 gap-4 items-stretch md:grid-cols-4 md:gap-6"
          >
            <div
              class="col-span-1 grid grid-cols-1 gap-4 md:col-span-2 md:grid-cols-2 md:gap-6"
            >
              <!-- Projected Income -->
              <ProjectedIncomeCard
                period={period}
                income={totalProjectedCredits}
              />

              <!-- Projected Expenses -->
              <ProjectedExpensesCard
                period={period}
                income={totalProjectedCredits}
                expenses={totalProjectedDebits}
              />

              <!-- Actual Income -->
              <ActualIncome
                period={period}
                projected={totalProjectedCredits}
                actual={totalActualCredits}
              />

              <!-- Actual Expenses -->
              <ActualExpenses
                period={period}
                projected={totalProjectedCredits}
                income={totalActualCredits}
                actual={totalActualDebits}
              />
              <hr class="block md:hidden my-2" />
            </div>

            <!-- Actual Savings -->
            <div class="col-span-1">
              <ActualSavings
                period={period}
                totalCredits={totalActualCredits}
                totalDebits={totalActualDebits}
                transactions={user.budget.transactions}
              />
            </div>

            <!-- Actual Investments -->
            <div class="col-span-1">
              <ActualInvestments
                period={period}
                totalCredits={totalActualCredits}
                transactions={user.budget.transactions}
              />
            </div>
          </div>
        </section>
        <hr class="my-8" />

        <!-- Reports -->
        <section>
          <h1 class="mb-6 text-gray-800 text-5xl font-extrabold">Metrics</h1>

          <div
            class="grid grid-cols-1 gap-4 items-stretch md:grid-cols-4 md:gap-6"
          >
            <!-- Income summary graph -->
            <div class="h-64 col-span-1 md:h-96 md:col-span-2">
              <IncomeReport
                client:only="solid-js"
                income={creditTransactions}
              />
            </div>
          </div>
          <hr class="my-8" />

          <!-- Income streams -->
          <section>
            <h1 class="mb-6 text-4xl text-gray-800 font-bold tracking-tight">
              Income Streams
            </h1>

            <!-- Expenses summary graph -->
            <div class="h-64 col-span-1 md:h-96 md:col-span-2">
              <ExpensesReport
                client:only="solid-js"
                expenses={debitTransactions}
              />
            </div>
          </section>
        </section>
        <hr class="my-8" />

        {/* Income streams */}
        <!-- Income streams -->
        <section>
          <h1 class="mb-6 text-4xl text-gray-800 font-bold tracking-tight">
            Income Streams
          </h1>

          <div class="grid grid-cols-1 gap-5 md:grid-cols-5">
            {
              creditStreams.map((stream) => (
                <div class="col-span-1">
                  <CreditStream stream={stream} />
                </div>
              ))
            }
          </div>
        </section>
        <hr class="my-8" />

        <!-- Transactions -->
        <section class="pb-6">
          <div class="mb-8 flex justify-between items-center">
            <h1 class="text-3xl text-gray-800 font-bold tracking-tight">
              Transactions
            </h1>

            <!-- Transaction actions -->
            <!-- <div
              class="fixed bottom-4 right-4 flex flex-col gap-1 md:static md:flex-row md:gap-2"
            >
              <ProjectedIncomeDialog onSubmit={newIncome} client:visible />
              <ProjectedExpenseDialog
                streams={projectedIncome}
                onSubmit={newExpense}
                client:visible
              />
              <NewTransactionDialog
                streams={projectedIncome}
                expenses={projectedExpenses}
                onSubmit={newTransaction}
                client:visible
              />
            </div> -->
          </div>

          <!-- List all transactions -->
          <div class="rounded bg-gray-100 p-4">
            <TransactionsSheet
              client:visible
              transactions={user.budget.transactions}
            />
          </div>
        </section>
      </main>
    </div>
  </body>
</html>
