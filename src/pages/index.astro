---
// Import the interfaces...
import {
  ETransactionFrequencyUnit,
  ETransactionNature,
  ETransactionType,
  IExpensePeriod,
  IIncomeStream,
  IProjectedExpense,
  IProjectedIncome,
  ITransaction,
} from '@interfaces/budget';
import type { IUser } from '@interfaces/user';

// Import the composables...
import useFinances from '@composables/useFinances';

// Import the components
import TheNavbar from '@layouts/TheNavbar.astro';
import ProjectedIncomeCard from '@components/cards/ProjectedIncomeCard.astro';
import ProjectedExpensesCard from '@components/cards/ProjectedExpensesCard.astro';
import ActualIncome from '@components/cards/ActualIncome.astro';
import ActualExpenses from '@components/cards/ActualExpenses.astro';
import ActualSavings from '@components/cards/ActualSavings.astro';
import ActualInvestments from '../components/cards/ActualInvestments.astro';
import IncomeReport from '@components/reports/IncomeReport';
import ExpensesReport from '@components/reports/ExpensesReport';
import IncomeStream from '@components/cards/IncomeStream.astro';
import ProjectedIncomeDialog from '@components/dialogs/ProjectedIncomeDialog';
import ProjectedExpenseDialog from '@components/dialogs/ProjectedExpenseDialog';
import NewTransactionDialog from '@components/dialogs/NewTransactionDialog';
import TransactionsSheet from '@components/tables/TransactionSheet';

// Get the data
const user: IUser = {
  username: 'chariskiragu',
  budget: {
    income: [
      {
        uid: '8ddd6810',
        refs: undefined,
        source: 'salary',
        amount: 65800,
        currency: 'ZAR',
        nature: ETransactionNature.Income,
        description: 'Base salary.',
        frequency: {
          recurring: true,
          unit: ETransactionFrequencyUnit.Month,
          value: 1,
          start: '2023-02-28T08:30:30.000Z',
          end: undefined,
        },
        createdAt: '2023-01-07T06:35:34.155Z',
        updatedAt: '2023-01-07T06:35:34.155Z',
      },
      {
        uid: '75a700fe',
        refs: undefined,
        source: 'bonus',
        amount: 14200,
        currency: 'ZAR',
        nature: ETransactionNature.Income,
        description: 'Y1 signing bonus.',
        frequency: {
          recurring: true,
          unit: ETransactionFrequencyUnit.Month,
          value: 1,
          start: '2023-12-28T08:30:30.000Z',
          end: '2023-12-28T08:30:30.000Z',
        },
        createdAt: '2023-02-28T08:30:30.000Z',
        updatedAt: '2023-02-28T08:30:30.000Z',
      },
    ],
    expenses: [
      {
        uid: '2784baf1',
        refs: ['all'],
        source: 'tithe',
        description: undefined,
        type: ETransactionType.Percentage,
        amount: 10,
        currency: 'ZAR',
        nature: ETransactionNature.Investment,
        frequency: {
          recurring: true,
          unit: ETransactionFrequencyUnit.Month,
          value: 1,
          start: '2023-12-28T08:30:30.000Z',
          end: undefined,
        },
        createdAt: '2023-01-07T06:35:34.155Z',
        updatedAt: '2023-01-07T06:35:34.155Z',
      },
      {
        uid: 'dd93b80a',
        refs: ['all'],
        source: 'tax',
        description: undefined,
        type: ETransactionType.Percentage,
        amount: 30,
        currency: 'ZAR',
        nature: ETransactionNature.Expense,
        frequency: {
          recurring: true,
          unit: ETransactionFrequencyUnit.Month,
          value: 1,
          start: '2023-12-28T08:30:30.000Z',
          end: undefined,
        },
        createdAt: '2023-01-07T06:35:34.155Z',
        updatedAt: '2023-01-07T06:35:34.155Z',
      },
      {
        uid: 'b83a38d6',
        refs: ['all'],
        source: 'investment',
        description: undefined,
        type: ETransactionType.Percentage,
        amount: 10,
        currency: 'ZAR',
        nature: ETransactionNature.Investment,
        frequency: {
          recurring: true,
          unit: ETransactionFrequencyUnit.Month,
          value: 1,
          start: '2023-12-28T08:30:30.000Z',
          end: undefined,
        },
        createdAt: '2023-01-07T06:35:34.155Z',
        updatedAt: '2023-01-07T06:35:34.155Z',
      },
      {
        uid: 'f22400fc',
        refs: ['8ddd6810'],
        source: 'rent',
        description: undefined,
        type: ETransactionType.Fixed,
        amount: 6500,
        currency: 'ZAR',
        nature: ETransactionNature.Expense,
        frequency: {
          recurring: true,
          unit: ETransactionFrequencyUnit.Month,
          value: 1,
          start: '2023-12-28T08:30:30.000Z',
          end: undefined,
        },
        createdAt: '2023-01-07T06:35:34.155Z',
        updatedAt: '2023-01-07T06:35:34.155Z',
      },
    ],
    transactions: [
      {
        uid: '852b0411',
        refs: undefined,
        source: 'salary',
        amount: 65800,
        currency: 'ZAR',
        nature: ETransactionNature.Income,
        description: 'Relocation lump-some',
        createdAt: '2022-12-15T06:35:34.155Z',
        updatedAt: '2022-12-15T06:35:34.155Z',
      },
      {
        uid: '852b0411',
        refs: undefined,
        source: 'bonus',
        amount: 14200,
        currency: 'ZAR',
        nature: ETransactionNature.Income,
        description: 'Relocation lump-some',
        createdAt: '2022-12-15T06:35:34.155Z',
        updatedAt: '2022-12-15T06:35:34.155Z',
      },
      {
        uid: '463d0331',
        refs: ['f22400fc'],
        source: 'rent',
        amount: 12000,
        currency: 'ZAR',
        nature: ETransactionNature.Expense,
        description:
          "First month's rent, deposit, service charge and application fee for the new apartment",
        updatedAt: '2023-02-01T06:35:34.155Z',
        createdAt: '2023-02-01T06:35:34.155Z',
      },
      {
        uid: '052d7675',
        refs: undefined,
        source: 'tithe',
        description: '',
        amount: 8000,
        currency: 'ZAR',
        nature: ETransactionNature.Investment,
        createdAt: '2023-02-02T06:35:34.155Z',
        updatedAt: '2023-02-02T06:35:34.155Z',
      },
      {
        uid: 'd41bd660',
        refs: undefined,
        source: 'transport',
        description: '',
        amount: 500,
        currency: 'ZAR',
        nature: ETransactionNature.Expense,
        createdAt: '2023-02-15T10:35:34.155Z',
        updatedAt: '2023-02-15T10:35:34.155Z',
      },

      {
        uid: '852b0411',
        refs: undefined,
        source: 'salary',
        amount: 65800,
        currency: 'ZAR',
        nature: ETransactionNature.Income,
        description: 'Relocation lump-some',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      },
      {
        uid: '852b0411',
        refs: undefined,
        source: 'bonus',
        amount: 14200,
        currency: 'ZAR',
        nature: ETransactionNature.Income,
        description: 'Relocation lump-some',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      },
      {
        uid: '463d0331',
        refs: ['f22400fc'],
        source: 'rent',
        amount: 12000,
        currency: 'ZAR',
        nature: ETransactionNature.Expense,
        description:
          "First month's rent, deposit, service charge and application fee for the new apartment",
        updatedAt: new Date().toISOString(),
        createdAt: new Date().toISOString(),
      },
      {
        uid: '052d7675',
        refs: undefined,
        source: 'tithe',
        description: '',
        amount: 8000,
        currency: 'ZAR',
        nature: ETransactionNature.Investment,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      },
      {
        uid: 'd41bd660',
        refs: undefined,
        source: 'transport',
        description: '',
        amount: 500,
        currency: 'ZAR',
        nature: ETransactionNature.Expense,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      },
    ],
  },
};

// Define the period.
const period: IExpensePeriod = {
  range: 'monthly',
  start: new Date('2023-02-01'),
  end: new Date('2023-03-31'),
};

// Create a user finances object.
const {
  projectedIncome,
  projectedExpenses,
  totalProjectedIncome,
  totalProjectedExpenses,
  transactions,
  actualIncome,
  actualExpenses,
  totalActualIncome,
  totalActualExpenses,
} = useFinances(user.budget);

// Get the list of projected income streams and their fulfillment
// (whether they were received or not).
const incomeStreams: IIncomeStream[] = projectedIncome.map((stream) => ({
  projected: stream,
  // Check if it was fulfilled in the actual income transaction.
  actual: actualIncome.filter((transaction) =>
    transaction.refs?.includes(stream.uid)
  ),
}));

const handleNewProjectedIncome = async (
  data: IProjectedIncome
): Promise<void> => {
  console.dir(data);
};

const handleNewProjectedExpense = async (
  data: IProjectedExpense
): Promise<void> => {
  console.dir(data);
};

const handleNewTransaction = async (data: ITransaction): Promise<void> => {
  console.dir(data);
};
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content="Budgetr" />
    <title>Budgetr</title>
  </head>
  <body>
    <!-- Navigation bar -->
    <header class="sticky top-0 z-10">
      <TheNavbar />
    </header>

    <!-- Content -->
    <section class="relative h-screen">
      <!-- Main content -->
      <main class="h-full pl-6 p-6 md:px-12 md:py-12 2xl:px-20">
        <!-- At a glance -->
        <section>
          <h1 class="mb-6 text-gray-800 text-5xl font-extrabold">
            At a glance
          </h1>

          <div
            class="grid grid-cols-1 gap-4 items-stretch md:grid-cols-4 md:gap-6"
          >
            <div
              class="col-span-1 grid grid-cols-1 gap-4 md:col-span-2 md:grid-cols-2 md:gap-6"
            >
              <!-- Projected Income -->
              <ProjectedIncomeCard
                period={period}
                income={totalProjectedIncome}
              />

              <!-- Projected Expenses -->
              <ProjectedExpensesCard
                period={period}
                income={totalProjectedIncome}
                expenses={totalProjectedExpenses}
              />

              <!-- Actual Income -->
              <ActualIncome
                period={period}
                projected={totalProjectedIncome}
                actual={totalActualIncome}
              />

              <!-- Actual Expenses -->
              <ActualExpenses
                period={period}
                projected={totalProjectedIncome}
                income={totalActualIncome}
                actual={totalActualExpenses}
              />
              <hr class="block md:hidden my-2" />
            </div>

            <!-- Actual Savings -->
            <div class="col-span-1">
              <ActualSavings
                period={period}
                income={totalActualIncome}
                transactions={transactions}
              />
            </div>

            <!-- Actual Investments -->
            <div class="col-span-1">
              <ActualInvestments
                period={period}
                income={totalActualIncome}
                transactions={transactions}
              />
            </div>
          </div>
        </section>
        <hr class="my-8" />

        <!-- Reports -->
        <section>
          <h1 class="mb-6 text-gray-800 text-5xl font-extrabold">Metrics</h1>

          <div
            class="grid grid-cols-1 gap-4 items-stretch md:grid-cols-4 md:gap-6"
          >
            <!-- Income summary graph -->
            <div class="h-64 col-span-1 md:h-96 md:col-span-2">
              <IncomeReport client:only="solid-js" income={actualIncome} />
            </div>

            <!-- Expenses summary graph -->
            <div class="h-64 col-span-1 md:h-96 md:col-span-2">
              <ExpensesReport
                client:only="solid-js"
                expenses={actualExpenses}
              />
            </div>
          </div>
        </section>
        <hr class="my-8" />

        {/* Income streams */}
        <section>
          <h1 class="mb-6 text-4xl text-gray-800 font-bold tracking-tight">
            Income Streams
          </h1>

          <div class="grid grid-cols-1 gap-5 md:grid-cols-5">
            {
              incomeStreams.map((stream) => (
                <div class="col-span-1">
                  <IncomeStream stream={stream} />
                </div>
              ))
            }
          </div>
        </section>
        <hr class="my-8" />

        {/* Transactions */}
        <section class="pb-6">
          <div class="mb-8 flex justify-between items-center">
            <h1 class="text-3xl text-gray-800 font-bold tracking-tight">
              Transactions
            </h1>

            {/* Transaction actions */}
            <div
              class="fixed bottom-4 right-4 flex flex-col gap-1 md:static md:flex-row md:gap-2"
            >
              <ProjectedIncomeDialog client:visible />
              <ProjectedExpenseDialog
                streams={projectedIncome}
                client:visible
              />
              <NewTransactionDialog
                streams={projectedIncome}
                expenses={projectedExpenses}
                client:visible
              />
            </div>
          </div>

          {/* List all transactions */}
          <div class="rounded bg-gray-100 p-4">
            <TransactionsSheet client:visible transactions={transactions} />
          </div>
        </section>
      </main>
    </section>
  </body>
</html>
